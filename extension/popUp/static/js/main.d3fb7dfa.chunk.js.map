{"version":3,"sources":["logo.svg","LinkChooser.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LinkChooser","increaseWidth","k","widthList","message","success","content","className","style","marginTop","duration","persistToLocalStorage","decreaseWidth","Math","max","remove","form","props","keys","getFieldValue","length","splice","setFieldsValue","filter","key","add","console","log","JSON","stringify","nextKeys","concat","push","validateFields","err","values","names","map","window","localStorage","setItem","handleSubmit","e","preventDefault","this","getFieldDecorator","initialValue","formItems","index","display","flexDirection","justifyContent","Item","width","marginLeft","height","validateTrigger","rules","required","whitespace","placeholder","type","onClick","fontSize","color","onSubmit","onChange","React","Component","LinkChooserHorizontalForm","Form","create","name","mapPropsToFields","websites","parse","getItem","keysList","namesDict","i","createFormField","value","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3fb7dfa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { Form, Input, Icon, Button, message} from \"antd\";\n\nclass LinkChooser extends React.Component {\n  componentDidMount() {\n    const { form } = this.props;\n    this.widthList = form.getFieldValue(\"widthList\");\n  }\n\n  increaseWidth = (k) => {\n    this.widthList[k] += 1;\n  \n    message.success({\n      content: 'New width is ' + this.widthList[k],\n      className: 'custom-class',\n      style: {\n        marginTop: '15vh',\n      },\n      duration: 0.7,\n    });\n\n    this.persistToLocalStorage();\n\n  };\n\n  decreaseWidth = (k) => {\n    this.widthList[k] -= 1;\n    this.widthList[k] = Math.max(this.widthList[k], 1);\n\n    message.success({\n      content: 'New width is ' + this.widthList[k],\n      className: 'custom-class',\n      style: {\n        marginTop: '15vh',\n      },\n      duration: 0.7,\n    });\n    this.persistToLocalStorage();\n  };\n\n  remove = (k) => {\n    const { form } = this.props;\n    // can use data-binding to get\n    const keys = form.getFieldValue(\"keys\");\n    // We need at least one passenger\n    if (keys.length === 1) {\n      return;\n    }\n\n    // delete from width list\n    this.widthList.splice(k);\n\n    // can use data-binding to set\n    form.setFieldsValue({\n      keys: keys.filter((key) => key !== k),\n    });\n\n    this.persistToLocalStorage();\n  };\n\n  add = () => {\n    const { form } = this.props;\n    console.log(JSON.stringify(this.props));\n    // can use data-binding to get\n    const keys = form.getFieldValue(\"keys\");\n    const nextKeys = keys.concat(keys.length);\n\n    // append width list\n    this.widthList.push(1);\n\n    // can use data-binding to set\n    // important! notify form to detect changes\n    form.setFieldsValue({\n      keys: nextKeys,\n    });\n  };\n\n  persistToLocalStorage = () => {\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        const { keys, names } = values;\n        console.log(\n          \"Saving to local storage:\",\n          keys.map((key) => names[key])\n        );\n\n        window.localStorage.setItem(\n          \"spider-web-list\",\n          JSON.stringify(keys.map((key) => names[key]))\n        );\n\n        console.log(\"saving: \", this.widthList);\n        window.localStorage.setItem(\n          \"spider-web-list-width\",\n          JSON.stringify(this.widthList)\n        );\n      }\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.persistToLocalStorage();\n  };\n\n  render() {\n    const { getFieldDecorator, getFieldValue } = this.props.form;\n\n    getFieldDecorator(\"keys\", { initialValue: [] });\n    const keys = getFieldValue(\"keys\");\n    const formItems = keys.map((k, index) => (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Form.Item style={{ width: \"75%\", marginLeft: \"2%\", height: \"20\" }}>\n          {getFieldDecorator(`names[${k}]`, {\n            validateTrigger: [\"onChange\", \"onBlur\"],\n            rules: [\n              {\n                required: true,\n                whitespace: true,\n                message: \"Enter the link you want to be opened\",\n              },\n            ],\n          })(<Input placeholder=\"url\" />)}\n        </Form.Item>\n        <div style={{ marginTop: 10 }}>\n          <Icon\n            type=\"zoom-in\"\n            onClick={() => this.increaseWidth(k)}\n            style={{ marginLeft: 7, fontSize: 18 }}\n          />\n          <Icon\n            className=\"dynamic-delete-button\"\n            type=\"zoom-out\"\n            onClick={() => this.decreaseWidth(k)}\n            style={{ marginLeft: 7, fontSize: 18 }}\n          />\n          {keys.length > 1 ? (\n            <span>\n              <Icon\n                className=\"dynamic-delete-button\"\n                type=\"delete\"\n                onClick={() => this.remove(k)}\n                style={{ marginLeft: 7, fontSize: 18, color: \"black\" }}\n              />\n            </span>\n          ) : null}\n        </div>\n      </div>\n    ));\n\n    return (\n      <Form onSubmit={this.handleSubmit} onChange={this.handleSubmit}>\n        <div style={{ height: 7 }}></div>\n        {formItems}\n        <Form.Item>\n          <Button\n            type=\"dashed\"\n            onClick={this.add}\n            style={{ width: \"94%\", marginLeft: \"3%\" }}\n          >\n            <Icon type=\"plus\" /> Add Website\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nexport default LinkChooser;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport 'antd/dist/antd.css';\nimport { Form, Input } from 'antd';\nimport LinkChooser from './LinkChooser';\n\nconst LinkChooserHorizontalForm = Form.create({\n  name: 'horizontal_login', mapPropsToFields(props) {\n    var websites = JSON.parse(window.localStorage.getItem('spider-web-list'));\n    var widthList = JSON.parse(window.localStorage.getItem('spider-web-list-width')) || [];\n\n    var keysList = [];\n    var namesDict = {};\n\n    if (websites != null) {\n      for (var i = 0; i < websites.length; i += 1) {\n        if(widthList.length < websites.length) {\n          widthList.push(1)\n        }\n\n        keysList.push(i);\n        namesDict[`names[${i}]`] = Form.createFormField({\n          value: websites[i]\n        });\n      }\n    } else {\n      widthList = [1]\n      keysList.push(0);\n      namesDict['names[0]'] = Form.createFormField({\n        value: 'https://producthunt.com'\n      });\n    }\n\n    // Add the widthList to form data\n    namesDict['widthList'] = Form.createFormField({\n      value: widthList\n    })\n\n    console.log(\"--> namesDict: \", namesDict)\n    return {\n      keys: Form.createFormField({\n        value: keysList\n      }),\n      ...namesDict,\n    };\n  }\n})(LinkChooser);\n\n\nfunction App() {\n  return (\n    <LinkChooserHorizontalForm />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}